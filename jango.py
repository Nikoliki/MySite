#Шаги по созданию Django проекта 
#1. Написание спецификации - тут описывается цель прокета, его  фукциональность, а также внешний вид и интерфейс пользователя

#2.Создание виртуальной среды

#3.Создание Виртуальной среды с и менем ll_env:терминал ->
	#каталог(Папка):python -m venv ll_env 

#Активизация виртуальной среды 
	#каталог(Папка): ll_env\Scripts\activate.bat

#Завершение использования виртуальной среды 
	#каталог(Папка):deactivate(и при закрытии терминала)

#Установка  Django
	#После активации вирт среды: pip install django

#Создание проекта в Django
	#каталог(Папка):django-admin.py startproject learning_log .
	#каталог(Папка):ls #без него можно 
	#каталог(Папка):ls learning_log #без него можно

	#Файл urls.py сообщает Django, какие страницы следует строить в ответ на запросы браузера 
	#Файл wsgi  помогает Django предстовлять созданные файлы

#Создание базы данных
	#каталог(Папка):python manage.py migrate
	#Создание db.sqlite3
	#Каждое изменение Базы данных называеться  - "миграцией" 
	#Django  ---- SQLite #для баз данных работающих с одним файлом, для простых прилож

#Просмотр проекта 
	#каталог(Папка):python manage.py runserver
	#Вводим в интернет URL типа  http://127.0.0.1:8000/

#Начало работы над приложением
	#activate(vs) каталог(Папка):python manage.py startapp learning_logs

#Определение модулей
	#В  logs  именно models корректирока 

#Активизация моделей 
	#Добавление нашего приложения в кортеж с именем INSTALLED_APPS
	#Терминал
	#Изменение БД, для хранения информации
	#каталог(Папка):python manage.py makemigrations learning_logs

#Теперь применим миграцию для автоматического изменения БД
	#каталог(Папка):python manage.py migrate

#Административный сайт Django 
	#Создание суперпользователя 
		#каталог(Папка):python manage.py createsuperuser
			#Username (leave blank to use 'marwe'): ll_admin(имя суперпользователя)
			#Email address:(можно пропуск)
			#Password:
			#Password (again):(повтор)12345678
			Superuser created successfully.

#Регистрация модели на администрированном сайте
	#Открыть admin.py и внести корректировки
		#Говорит о том что упровление моделью должно осуществляться через админестративный сайт
			#http://127.0.0.1:8000/admin/
				#Code Topic  - Добавление темы 

#Определение модели Entry 
	#Code models.py
	#Каскадный метод - это метод который сообщает Django что при удалении темы все записи с этой темой, также должны быть удалены

#Миграция модели Entry
	#Провести миграцию
		#activate(vs) каталог(Папка):python manage.py makemigrations (имя приложения) learning_logs
			#activate(vs) каталог(Папка):python manage.py migrate

#Регистрация Entry на административном сайте
	#Модель Entry тоже нкобходимо зарегистрировать в admin.py
		#Code admin.py

#Интерактивная оболочка Django
	#Введенные данные можно проанализировать на программном уровне в интерактивном терминальном сеансе.
	#Эта интерактивная среда, называемая оболочкой (shell) Django, прекрасно подходит для тестирования и диагностики проекта 
		#activate(vs) каталог(Папка):python manage.py shell
			#Терминал запрос: >>>from learning_logs.models import Topic
			#Терминал зарпос: >>>Topic.objects.all()#для получения всех экзкмпляров модели Topic; возврощаемый список называеться итоговым набором. 
				#Чтот тип этого на выходе:<QuerySet [<Topic: Topic object (1)>, <Topic: Topic object (2)>]>
	#Например, просмотр индификаторов, назначенных каждому объекту темы,выпролняеться так:
		>>> topics = Topic.objects.all()
		>>> for topic in topics:
	#Можно просмотреть значения атрибутов 
		>>> t = Topic.objects.get(id=1)
		>>> t.text
		'Chess'
		>>> t.date_added
		datetime.datetime(2021, 5, 7, 18, 59, 14, 527601, tzinfo=<UTC>)
	#Также просмот данных
		>>> t.entry_set.all()#ОБЯЗ ДОБАВИТЬ В КОНЦЕ _set.all()
		<QuerySet [<Entry: Hello my friend. Save my long menu...>, <Entry: fun game...>]>
	#Это было в оболочке (shell) - тип запросы и общение с сервом.

#Создание страниц: домашняя страница Learning Log
	#Обычно процесс создаеия веб-страниц в django состоит из трех стадий: 
		определения URL
		написание предстовлений 
		написание шаблонов 

#Составление URL
	#В каталоге проекта learning_log открыть файл urls.py 
		#urlpatterns включает наборы URL-адресов из приложения в проект
		#Модуль admin.site.urls, определяет все URL-адреса, которые могут запрашиваться с админестративного сайта
			#Добавим в этот файл URL - адреса learning_log: в urls пишем
				from django.urls import path, include
	 	#Далее добовляем строку включееия модуля 'learning_log.urls'
	 		path('', include('learning_log.urls')),
#Создание urls только в learning_logs
	#entries code in urel
		#Где импортируктся функция path для связывания URL с Представлениями 
		#Еще импортируется модуля views
			#urlpatterns в этом модуле предстовляет собой список страниц, котоые могут запрашиваться из предложения learnings_logs  

#Написание представления
	#Файл views.py(предсталения) в learning_logs open
		#entries code in view.py
		#вызов render(),где использ два аргумента:
			исходный объект запроса/шаблон

#Написание шаблона.
	#Шаблон определяет общий внешний вид страницы 
		#В каталоге learning_logs создадим новый каталог(папку) с именем templates
			#В каталоге templates создаём каталог learning_log 
			#Построенная таким образом структура однозначно будет интепритироваться в Django
				#Во внутреннем каталоге learning_logs создаём файл с именем index.html
					#entries code in index.html
						теги <p></p> - обозначают абзацы
						тег <p> - открывает абзац, а тег </p> закрывает его
						Примечание: Следующ ошибка может произайти 
							ModelsNotFoundError: No models named 'learning_logs.urls'
							В таком случ лучше перезапустить сервер.

#Построение других страниц
	#Построение базового шаблона, от которого будут наследовать все шаблоны этого проекта
		#Наследование шаблонов 
			#Все шаблоны наследуются от одного прописываеться в 1
		#Начнем с создания шаблона base.html в одном каталоге с файлом index.html
			#Code in base.html 
				#Шаблонный тег - {%%},шаблонный тег предстовляет собой блок кода, который генерирует информацию для вывода на странице
					В данном примере шаблонный тег {% url 'learning_logs:index' %} генерирует URL-адрес, соответствии схемой URL, определенной в файле
					learning_logs/urls.py c именем 'index'
						В данном примере learning_logs - пространство имен,
						а index - схема URL с уникальным именем в  этом пространстве имен 
							Пространство имен определяеться значением присвоенном в app_name в файле learning_logs/urls.py
				#Далее, якорный тег - это присвоение к переменной <a herf = "url_ссылка">Текст ссылки</a>
					#Каждая страница в проекте будет наследоваться от base.html, так как на каждой станице будет содержаться ссылка на глав страницу

#Дочерний шаблон
	#Теперь надо переаисать файл index.html, чтобы он наследовал от base.html 
		#Code index.html
			{% extends %} - тег который сообщакт Django, от какого родительского шаблона он наследует в нём прописываеться путь к родительскомо шаблону
			1.Делаем так чтобы он наследовалься от base.html - от главного шаблона 
			2.Создаётся новый болк с вставкой тега {%block%}, с именем content. Всё что наследуеться от родительского шаблона поподает в блок content,
			в данном случае это абзац с описанием проекта LearningLog
			3.Далее сообщаем что блок завершено {%endblock content%}

#Страница со списком тем
	#Схема URL для тем
		#Вносим изменения в learning_logs/urls.py
		#Где делаем новый путь к темам

#Представление topics
	#Функция topics() должна получать данные из бд и отпровлять их шаблону
		#Code in views.py - где мы :
			импортируем модель, связонный с нужными данными
			необходим один параметр: объект request, полученный Django от сервера
			затем  выдается запрос к бд на получение объектов Topic, отсортированных по атрибуту date_added
			Далее определяеться контекст, который будет передаваться шаблону. Контекст представляет собой словарь в котором:
				1.ключами явл имена, использ в шаблоне для обращения к данным
				2.А значением - данные, которые должны передаваться шаблону


#Шаблон topics
	#Шаблон страницы со списком тем получает словарь context, чтобы шаблон мог использовать данные, представленные topics() 
		#Создаём файл с именем topics.html в одном каталоге с index.html
			#Вывод списка тем в шаблоне осуществляеться следующим образом:
			#Code in index.html
			В стандартном языке HTML маркированный список называеться неупопядоченным списком и обозначаеться тегами <ul></ul>
			#В шаблоне каждый цикл {for} должен кончаться {endfor} так как тут другой принцип
				#Часто встреч циклы следующего вида:
					{% for элемент in список %}
						действия для каждого элемента
					{% endfor%}
			Чтобы вывести значение переменной в шаблоне, нужно заключить её имя в двойные фигурные скобки {{переменная}}
			Тег html <li></li> обозначают элемент списка.
				Шаблонный тег {empty},сообщает Django, что делать при отсутствии элементов в списке использ как в Python else при цикле

	#Затем необходимо изменить базовый шаблон и вкл ссылку на страницу с темами
		#Добавим код в base.html для включения ссылки на страницу с темами
			#Появятся  нов страница, она будет выводить  темы

#Схема URL для отдельных тем 
	#Добавим в urls.py из  learning_logs code пути 
		#где первая часть строки сообщает Django, что искать следует URL-адреса, у которых за базовым адресом идет слово topics. 
		#Вторая часть строки, /<int:topic_id>/, описывает целое число, заключонное между двумя слешами.

#Представления отдельных тем.
	#Фуекция topic() должна получ тему и все связвнные с ней записи из БД
		#Создаем в views.py именно функцию topic 
			#Функция get() используемая для получения темы 
			#Далее загружабются записи, связанные с данной темой и упорядочиваются по аналогии date_added, а минус дает делать всё в 
			#обратном порядке, именно: сортирует
		#тема и записи сохроняются в словаре context, который передаётся шаблону topic.html

#Шаблон отдельной темы 
	#создадим в learning_logs, где шаблоны> назвав topic.html
		#code in topic.html entries
		#(|) - в Django это фильтор -  функцию, изменяющую значение шаблонной переменной.Фильтр date:'M d, Y H:i' выводит временные метки в формате 1, 2018 23:00
			#Конеч итог: по нажатию на тему, мы можем увидеть название темы, записи к теме и время,дату 
#Ссылки на станицы 
	#Необходимо изменить шаблон списка тем. Чтобы каждая тема вела на собственную страницу 
		#Вносим изменения в topics.html





#Учетные записи пользователей
	#Редактирование данных 
		#У пользователей появиться возможность создовать новые темы, добовлять новые записи и редактировать записи, сделанные ранее

#Добавление новых тем
	Простейший способ построения форм в Django - это Объект ModelForm - который автомотически строит форму на основании моделей  
		#Наша первая форма будет создана в файле forms.py, который находиться в каталоге models.py
			#code in forms.py

#URL-адрес для new_topic
	#code app in learning_logs/urls.py 
#Фуекция представления new_topic()
	#Должна обрабатывать две разные ситуации: 
		#исходные запросы страницы new_topic
		#Обработка данных, отправленных на форме
			#Затем она должна переноправить пользователя обратно на страницу topic
			#Сode in  views entries
#Запросы GET и POST 
	#Запросы  GET используются для страниц, которые только читают данные с сервера 
	#Запросы POST используют, когда пользователь должен отпровлять информацию на форму 

#Шаблон new_topic
	#Создание нового шаблона с именем new_topic.html 
	#code in new_topic.html 
	#as_p Модификатор as_p приказывает Django отобразить все элементы формы в формате абзацев - это простой способ аккуратного отображения формы

#Создание ссылки на страницу new_topic
	#Ccылка на страницу new_topic создадим на странице topics
		#code in topics.html

#Добавление новых записей
	#code in forms.py 
		#URL-адрес для new_entry
			#Добавим URL в learning_logs/urls.py
			#path in learning_logs/urls.py
				#Функция предстовления new_entry 
					#code in views.py 

#Шаблон new_entry 
	#Где есть ссылка на глав страницу этой темы 
	#В коду вводится в аргумент topic_id, чтобы функция предстовления могла связать новую запись с правильной темой

#Создание ссылки на станицу new_entry 
	#Создаем ссылку на страницу new_entry на каждой станице темы: создаем в topic.py

#Редактирование записей 
	#Страница на которой пользователь сможет редачить раннее добавленные записи 

#URL-адреса для edit_entry 
	#code in learning_logs/urls.py

#Функция предстовления edit_entry
	#code in views.py 
	#Принцип: Когда страница edit_entry получает запрос GET, edit_entry()возвращает форму для редактирования записи
		#При получении запроса POST с отредаченой записью страница сохраняет измененный текст в БД

#Шаблон edit_entry
	#code in edit_entry.html 

#Создание ссылки на страницу edit_entry
	#Code in topic.html




#Создание учетных записей пользователей
	#Приложение user
		#Начнем  с создания нового приложения user командой startapp
			(ll_env) F:\Python_3\Django>python manage.py startapp users
			#Эта команда создает новый каталог с именем users структура которого повторяет структуру каталогов приложения  learning_logs

#Добавление пользователей в settings.py
	#В мои приложения 

#Включение URL-адресов из users 
	#code urls.py in learning_log - чтобы он включал  URL -адреса, написанные для приложения users 

#Страница входа
	#Создадим новый файл urls.py в каталоге learning_log/users/ 
		#code in urls.py

#Шаблон login
	#Создаем путь к шаблону login.html --- learning_log/users/templates/registration/
		#code in login.html

#Создание ссылки на страницу входа
	#Добавим ссылку на страницу входа в base.html

#Выход 
	#Терель необходимо включить ссылку base.html для выхода пользователя 
	#При нажатии на эту ссылку откроеться станица, подтверждающая, что выход был выполнен успешно 
		#Добавление ссылки в base.html
			#По умолчанию схеме URL для выходп назначаеться имя 'logout'

#Страница подтверждения выхода 
	#Строим нов страницу с уведомлением о том,что пользователь вышел из сеанса работы с приложением
		#Создадим новый шаблон logged_out.html в templates/registration
			#CODE in logged_out

#Страница регистрации 
	#Для этой цели мы используем класс Django UserCreationForm, но напишем собственную функцию представления  и шаблона
#URL-адрес регистрации
	#code urls.py in users
		#Тут мы делаем путь к views

#Функция предстовления register()
	#Открываем  views.py in users
		#code views.py in users 

#Создадим шаблоН регистрации
	#Создать шаблона register.html в одном каталоге с  login.html

#Создание ссылки на страницу регистрации
	#Добавим в шаблое base.html нов ссылку на страницу регистрации

#Редактирование данных
	#для учёта данных, которые ввел пользователь
	 
